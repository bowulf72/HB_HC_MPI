{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Base string for naming resources (max length of 8)"
      },
      "maxLength": 8
    },
    "VMsku": {
      "type": "string",
      "defaultValue": "Standard_HC44rs",
      "allowedValues": [
        "Standard_HC44rs",
        "Standard_HB60rs"
      ],
      "metadata": {
        "description": "sku to use for the master VM"
      }
    },
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Authentication type for the virtual machines"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Admin password for the virtual machines"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH public key that will be included on all nodes. The OpenSSH public key can be generated with tools like ssh-keygen on Linux or OS X."
      }
    },
    "existingVNetName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "name of existing Virtual Network"
      }
    },
    "existingVNetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "name of Resource Group for existing Virtual Network"
      }
    },
    "existingSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "name of existing Virtual Network"
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "longNamingInfix": "[toLower(parameters('vmName'))]",
    "newStorageAccountSuffix": "[concat(variables('longNamingInfix'), 'sa')]",
    "vnetID": "[resourceId(parameters('existingVNetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('existingVNetName'))]",
    "SubnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('existingSubnetName'))]",
    "DiagSAName": "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'))), 'diag')]",
    "sshKeyPath": "[concat('/home/',parameters('adminUserName'),'/.ssh/authorized_keys')]",
    "Images": {
      "CentOS_7.6": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.6",
        "version": "latest"
      }
    },
    "NodeimageReference": "[variables('Images')['CentOS_7.6']]",

    "linuxConfiguration_sshPublicKey": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "path": "[variables('sshKeyPath')]",
            "keyData": "[parameters('sshPublicKey')]"
          }
        ]
      }
    },
    "linuxConfiguration_password": { },
    "linuxConfiguration": "[variables(concat('linuxConfiguration_',parameters('authenticationType')))]",
    
    
    "storageAccountType": "Standard_LRS",
    
    
    "vmnamingInfix": "[toLower(take(concat(parameters('vmName'), uniqueString(resourceGroup().id)), 9))]",
    "NodenicName": "[concat(variables('vmnamingInfix'), 'nic')]",
    
    "vmScripts": {
      "scriptsToDownload": [
        "https://raw.githubusercontent.com/grandparoach/HB_HC_MPI/master/loaddrivers.sh"
      ],
      "commandToExecute": "[concat('bash loaddrivers.sh')]"
    }
  },  

  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('DiagSAName')]",
      "location": "[variables('location')]",
      "apiVersion": "2015-06-15",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('NodeNicName')]",
      "location": "[variables('location')]",
      "apiVersion": "2016-03-30",
      "dependsOn": [ ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "NodeIP",
            "properties": {
              "privateIPAllocationMethod": "Dynamic", 
              "subnet": {
                "id": "[variables('SubnetRef')]"
              }
            }
          }
        ]
      }
    },

    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('vmName'), copyindex(1))]",
      "location": "[variables('location')]",
      "apiVersion": "2016-04-30-preview",
      "dependsOn": [
        "[concat('Microsoft.Network/networkinterfaces/', variables('NodeNicName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('DiagSAName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VMsku')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUserName')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": "[variables('NodeimageReference')]",
          "osDisk": {
            "caching": "ReadOnly",
            "createOption": "FromImage",
             "managedDisk": {
                "storageAccountType": "Premium_LRS"
             }
          } 
        },
        "networkProfile": {
          "networkInterfaces": [
            {
               "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('NodeNicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
           "storageUri": "[concat('http://',variables('DiagSAName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "apiVersion": "2018-10-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'), '/init')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ],
      "properties": {
         "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": "[variables('vmScripts').scriptsToDownload]",
          "commandToExecute": "[variables('vmScripts').commandToExecute]"
        }
      }
    }
  ]
}
